#set hostname=$getVar('hostname',None)
#set partition = $getVar('partition', None)
#set partition_size = $getVar('partition_size', None)
#set partition_maxsize = $getVar('partition_maxsize', None)
#set disk_reserve_size = $getVar('disk_reserve_size', None)
#set disk_max_size = $getVar('disk_max_size', None)
#set default_disk_reserve_size = $getVar('default_disk_reserve_size', '0')
#set default_disk_max_size = $getVar('default_disk_max_size', '0')

#if $hostname == None
#set $vgname = "VolGroup00"
#else
#set $vgname = $hostname.split('.')[0]
#end if

declare -A disk_mapping
declare -A disk_path_mapping
set \$(ls -s -l /dev/disk/by-path | awk '{print \$10, \$12}')
let disk_mapping_nums=\$#/2
let disk_mapping_offset=0
echo "disk_mapping_nums: \$disk_mapping_nums" > /tmp/log
echo "disk_mapping: \$*" >> /tmp/log
while [ \$disk_mapping_offset -lt \$disk_mapping_nums ]; do
    let found_disk_type=0
#if $getVar('disk_type_only','') != ""
    if expr match "\$1" ".*-${disk_type_only}-.*"; then
        let found_disk_type=1
    fi
#else
    let found_disk_type=1
#end if
    path_name=\$(basename \$1)
    disk_name=\$(basename \$2)
    let disk_mapping_offset=\$disk_mapping_offset+1 
    shift 2

    if [ \$found_disk_type -gt 0 ]; then
        disk_mapping[\${disk_name}]="/dev/disk/by-path/\${path_name}"
	disk_mapping[\${path_name}]="/dev/disk/by-path/\${path_name}"
	disk_path_mapping[\${disk_name}]="/dev/\${disk_name}"
	disk_path_mapping[\${path_name}]="/dev/\${disk_name}"
    fi
done

for key in \${!disk_mapping[@]}; do
    echo "disk mapping \$key => \${disk_mapping[\$key]}" >> /tmp/log
done

for key in \${!disk_path_mapping[@]}; do
    echo "disk path mapping \$key => \${disk_path_mapping[\$key]}" >> /tmp/log
done

declare -A partition_disks 
declare -A disks
set \$(lsblk -n -d -P -o NAME,TYPE,RM,SIZE | grep 'TYPE="disk"' | grep 'RM="0"' | cut -d' ' -f1,4)
let disk_nums=\$#/2
let disk_offset=0
let found_disk_offset=0
while [ \$disk_offset -lt \$disk_nums ]; do
    eval \$1
    disk_name=\$(basename \$NAME)
    disk=/dev/\${disk_name}
    shift 2
    if [[ x"\${disk_mapping[\${disk_name}]}" == x"" ]]; then
        echo "ignore disk \${disk_name} since it is not in disk_mapping" >> /tmp/log
        let disk_offset=\$disk_offset+1
        continue
    fi
    let found_disk=0

#if $getVar('partitions_only',  '') != ""
    #for $partition_only in $partitions_only.split(',')
        #if not $partition_only
            #continue
        #end if
    if expr match "\${disk_name}" "$partition_only"; then
        let found_disk=1
    else
        echo "disk \${disk_name} does not match $partition_only" >> /tmp/log
    fi
    #end for
#else
    let found_disk=1
#end if

#if $getVar('partition_by_path', '0') != "0"
    disk=\${disk_mapping[\${disk_name}]}
#end if

    if [ \${found_disk} -gt 0 ]; then
        echo "add disk \${disk_name} in partitioning list" >> /tmp/log
	partition_disks[\${found_disk_offset}]=\$disk
        let found_disk_offset=\${found_disk_offset}+1
    fi

    disks[\${disk_offset}]=\$disk
    let disk_offset=\${disk_offset}+1
done
echo "partition disks \${partition_disks[@]}" >> /tmp/log
echo "disks \${disks[@]}" >> /tmp/log

#if $getVar('sort_disks', '0') != "0" 
sorted_disks=(\$(printf '%s\n' \${partition_disks[@]} | sort))
#else
sorted_disks=(\${partition_disks[@]})
#end if
echo "sorted disks \${sorted_disks[@]}" >> /tmp/log

#if $getVar('start_from_disk', '') != ""
    #set $start_from_disk = $int($start_from_disk)
    #if $start_from_disk > 0
        #set $disk_start_offset = $start_from_disk - 1
    #else
        #set $disk_start_offset = 0
    #end if
set \${sorted_disks[@]}
shift $disk_start_offset
sorted_disks=(\$@)
echo "sorted disks begin from the $start_from_disk: \${sorted_disks[@]}" >> /tmp/log
#end if

#if $getVar('disk_num', '') != ""
set \${sorted_disks[@]}
sorted_disks=\$(printf '%s\n' \$@ | head -n${disk_num})
echo "sorted disks for $disk_num disks: \${sorted_disks[@]}" >> /tmp/log
#end if

first_disk=""
first_disk_name=""
for disk in \${sorted_disks}; do
    if [ -z "\${first_disk}" ]; then
        first_disk=\${disk}
        first_disk_name=\$(basename \${first_disk})
        break
    fi
done
echo "first disk \${first_disk}" >> /tmp/preseed.log

let disk_nums=\${#sorted_disks[@]}
sorted_disks_str=""
for disk in \${sorted_disks[@]}; do
    if [ -z "${sorted_disks_str}" ]; then
        sorted_disks_str="\${disk}"
    else
        sorted_disks_str="\${sorted_disks_str},\${disk}"
    fi
done

declare -A remove_disks
#if $getVar('keep_old_partitions', '0') != "0"
for disk in \${sorted_disks[@]}; do
    dd if=/dev/zero of=\${disk} bs=512 count=1
    remove_disks+=(\$disk)
done
echo "only partition \$sorted_disks_str" >> /tmp/log
#else
for disk in \${disks[@]}; do
    dd if=/dev/zero of=\${disk} bs=512 count=1
    remove_disks+=(\$disk)
done
#end if
echo "remove disks \${remove_disks[@]}" >> /tmp/log

disk_partitions=\$(pvs --noheadings --separator :| cut -d: -f1)
remove_partitions=""
remove_vgs=""
for disk_partition in \${disk_partitions}; do
    vg=\$(pvs --noheadings --separator : \${disk_partition} | cut -d: -f2)
    remove_vg=""
    remove_partition=""
    for remove_disk in \${remove_disks[@]}; do
#if $getVar('partition_by_path', '0') != "0"
        path_name=\$(basename \${remove_disk})
	remove_disk_path=\${remove_disk}
        remove_disk=\${disk_path_mapping[\${path_name}]}
#else
        disk_name=\$(basename \${remove_disk})
        remove_disk_path=\${disk_mapping[\${disk_name}]}
#end if
        if [ -z "\${remove_disk}" ]; then
	    continue
	fi
	if [ -z "\${remove_disk_path}" ]; then
            continue
        fi
        if expr match "\${disk_partition}" "\${remove_disk_path}.*"; then
            remove_vg="\$vg"
            remove_partition="\${disk_partition}"
        else
            echo "partition \${disk_partition} does not match \${remove_disk_path}.*" >> /tmp/preseed.log
        fi
        if expr match "\${disk_partition}" "\${remove_disk}.*"; then
            remove_vg="\$vg"
            remove_partition="\${disk_partition}"
        else
            echo "partition \${disk_partition} does not match \${remove_disk}.*" >> /tmp/preseed.log
        fi
	if [[ "\$vg" == "$vgname" ]]; then
            remove_vg="\$vg"
	    remove_partition="\${disk_partition}"
        fi
    done
    if [ ! -z "\${remove_vg}" ]; then
        if [ -z "\${remove_vgs}" ]; then
            remove_vgs="\${remove_vg}"
        else
            vg_removed=0
            for vg in \${remove_vgs}; do
                if [[ "\$vg" == "\${remove_vg}" ]]; then
                    vg_removed=1
                fi
            done
            if [ \${vg_removed} -eq 0 ]; then
                remove_vgs="\${remove_vgs} \${remove_vg}"
            fi
        fi
    fi
    if [ ! -z "\${remove_partition}" ]; then
        if [ -z "\${remove_partitions}" ]; then
            remove_partitions="\${remove_partition}"
        else
	    pv_removed=0
	    for pv in ${remove_partitions}; do
	        if [[ "\$pv" == "\${remove_partition}" ]]; then
		    pv_removed=1
		fi
	    done
	    if [ \${pv_removed} -eq 0 ]; then
                remove_partitions="\${remove_partitions} \${remove_partition}"
	    fi
        fi
    fi
done

echo "remove vgs \${remove_vgs}" >> /tmp/preseed.log
for remove_vg in \${remove_vgs}; do
    vgremove -f \${remove_vg}
done

echo "remove partitions \${remove_partitions} from \${remove_vgs}" >> /tmp/preseed.log
for remove_partition in \${remove_partitions}; do
    pvremove -ff -y \${remove_partition}
done

declare -A reserve_disks_size
#if $disk_reserve_size != None
    #set disk_sizes = [disk_size.strip() for disk_size in $disk_reserve_size.split(';') if disk_size.strip()]
    #for disk_and_size in $disk_sizes
        #set disk_name, size = $disk_and_size.split(' ', 1)
        #set disk_name = $disk_name.strip()
reserve_disks_size[${disk_name}]=${size}
    #end for
#end if

default_reserve_disk_size=${default_disk_reserve_size}

declare -A max_disks_size
#if $disk_max_size != None
    #set disk_sizes = [disk_size.strip() for disk_size in $disk_max_size.split(';') if disk_size.strip()]
    #for disk_and_size in $disk_sizes
        #set disk_name, size = $disk_and_size.split(' ', 1)
        #set disk_name = $disk_name.strip()
max_disks_size[${disk_name}]=${size}
    #end for
#end if

default_max_disk_size=${default_disk_max_size}

declare -A partitions_percentage
declare -A partitions_name
declare -A partitions_size
declare -A partitions_maxsize

#if $partition != None
    #set vol_sizes = [part.strip() for part in $partition.split(';') if part.strip()]
    #for vol_and_size in $vol_sizes
        #set vol, vol_size = $vol_and_size.split(' ', 1)
        #set vol = $vol.strip()
	#if $vol == '/'
	    #set volname = 'root'
	#elif $vol == 'swap'
	    #set volname = 'swap'
	#elif $vol.startswith('/')
            #set volname = $vol[1:].replace('/', '_')
	#else
	    #set volname = ''
# $vol is not starts with /
            #continue
        #end if
partitions_name[$vol]=$volname
        #set vol_size = $vol_size.strip()
        #if $vol_size.endswith('%'):
partitions_percentage[$vol]=$vol_size
        #else
partitions_size[$vol]=$vol_size
        #end if
    #end for
#end if

#if $partition_size != None
    #set vol_sizes = [part.strip() for part in $partition_size.split(';') if part.strip()]
    #for vol_and_size in $vol_sizes
        #set vol, vol_size = $vol_and_size.split(' ', 1)
        #set vol = $vol.strip()
partitions_size[$vol]=${vol_size}
    #end for
#end if

#if $partition_maxsize != None
    #set vol_sizes = [part.strip() for part in $partition_maxsize.split(';') if part.strip()]
    #for vol_and_size in $vol_sizes
        #set vol, vol_size = $vol_and_size.split(' ', 1)
        #set vol = $vol.strip()
partitions_maxsize[$vol]=${vol_size}
    #end for
#end if

default_partition=$getVar('default_partition', '/')
partition_fstype=$getVar('partition_fstype', 'ext3')

for key in \${!partitions_name[@]}; do
    echo "partition names \$key => \${partitions_name[\$key]}" >> /tmp/log
done

for key in \${!partitions_percentage[@]}; do
    echo "partition percentage \$key => \${partitions_percentage[\$key]}" >> /tmp/log
done

for key in \${!partitions_size[@]}; do
    echo "partition min size \$key => \${partitions_size[\$key]}" >> /tmp/log
done

echo "default partition \${default_partition}" >> /tmp/log
echo "partition fstype \${partition_fstype}" >> /tmp/log

for key in \${!partitions_maxsize[@]}; do
    echo "partition max size \$key => \${partitions_maxsize[\$key]}" >> /tmp/log
done

for disk in \${sorted_disks[@]}; do
    echo '<drive>' >> /tmp/profile/partition.xml
    echo "  <device>\$disk</device>" >> /tmp/profile/partition.xml
    echo '  <initialize config:type="boolean">true</initialize>' >> /tmp/profile/partition.xml
    echo '  <use>all</use>' >> /tmp/profile/partition.xml
    echo '  <partitions config:type="list">' >> /tmp/profile/partition.xml

    if [[ "\$disk" == "\${first_disk}" ]]; then
        size=\${partitions_size[/boot]:-500}
        unset \${partitions_name[/boot]}
        echo '    <partition>' >> /tmp/profile/partition.xml
        echo "      <filesystem config:type=\"symbol\">\${partition_fstype}</filesystem>" >> /tmp/profile/partition.xml
        echo '      <format config:type="boolean">true</format>' >> /tmp/profile/partition.xml
#if $getVar('partition_by_path', '0') != "0" 
        echo '      <mountby config:type="symbol">uuid</mountby>' >> /tmp/profile/partition.xml
#else
        echo '      <mountby config:type="symbol">device</mountby>' >> /tmp/profile/partition.xml
#end if
        echo '      <partition_type>primary</partition_type>' >> /tmp/profile/partition.xml
        echo '      <mount>/boot</mount>' >> /tmp/profile/partition.xml
        echo "      <size>\${size}</size>" >> /tmp/profile/partition.xml
        echo '    </partition>' >> /tmp/profile/partition.xml
        size=\${partitions_size[swap]:-0}
        unset \${partitions_name[swap]}
        echo '    <partition>' >> /tmp/profile/partition.xml
        echo "      <filesystem config:type=\"symbol\">swap</filesystem>" >> /tmp/profile/partition.xml
        echo '      <partition_type>primary</partition_type>' >> /tmp/profile/partition.xml
        echo '      <mount>swap</mount>' >> /tmp/profile/partition.xml
        if [[ "\$size" == "0" ]]; then
            echo "      <size>auto</size>" >> /tmp/profile/partition.xml
        else
            echo "      <size>\${size}</size>" >> /tmp/profile/partition.xml
        fi
        echo '    </partition>' >> /tmp/profile/partition.xml
    fi
    echo '    <partition>' >> /tmp/profile/partition.xml
    echo '      <lvm_group>$vgname</lvm_group>' >> /tmp/profile/partition.xml
    echo '      <partition_type>primary</partition_type>' >> /tmp/profile/partition.xml
    if [ ! -z "\${max_disks_size[\${disk}]}" ]; then
        max_disk_size=\${max_disks_size[\${disk}]}
    else
        max_disk_size=\${default_max_disk_size}
    fi
    if [[ "\${max_disk_size}" !=  "0" ]]; then
        echo "      <size>\${max_disk_size}</size>" >> /tmp/profile/partition.xml
    else
        echo '      <size>max</size>' >> /tmp/profile/partition.xml
    fi
    echo '    </partition>' >> /tmp/profile/partition.xml
    if [ ! -z "\${reserve_disks_size[\$disk]}" ]; then
        reserve_disk_size=\${reserve_disks_size[\$disk]}
    else
        reserve_disk_size=\${default_reserve_disk_size}
    fi
    echo "reserve \${reserve_disk_size} on \${disk}" >> /tmp/log
    if [[ "\${reserve_disk_size}" != "0" ]; then
        echo '    <partition>' >> /tmp/profile/partition.xml
        echo '      <lvm_group>reserved</lvm_group>' >> /tmp/profile/partition.xml
        echo "      <size>\${reserve_disk_size}</size>" >> /tmp/profile/partition.xml
        echo '    </partition>' >> /tmp/profile/partition.xml
    fi
    echo '  </partitions>' >> /tmp/profile/partition.xml
    echo '</drive>' >> /tmp/profile/partition.xml
done

if [[ x"\${partitions_name[/]}" == x"" ]]; then
    partitions_name[/]="root"
fi

echo "partition disks" >> /tmp/log

declare -A sorted_partitions
sorted_partitions[0]=\${default_partition}
partition_offset=1
for key in \${!partitions_name[@]}; do
    if [[ "\$key" != "\${default_partition}" ]]; then
        sorted_partitions[\${partition_offset}]=\$key
	let partition_offset=\${partition_offset}+1
    fi
done
#stop
echo '<drive>' >> /tmp/profile/partition.xml
echo "  <device>/dev/$vgname</device>" >> /tmp/profile/partition.xml
echo '  <is_lvm_vg config:type="boolean">true</is_lvm_vg>' >> /tmp/profile/partition.xml
echo '  <pesize>4M</pesize>' >> /tmp/profile/partition.xml
echo '  <use>all</use>' >> /tmp/profile/partition.xml
echo '  <partitions config:type="list">' >> /tmp/profile/partition.xml
for key in \${sorted_partitions[@]}; do
    echo '    <partition>' >> /tmp/profile/partition.xml
    echo "      <filesystem config:type=\"symbol\">\${partition_fstype}</filesystem>" >> /tmp/profile/partition.xml
    echo "      <lv_name>\${partition_name}vol</lv_name>" >> /tmp/profile/partition.xml
    echo "      <mount>\$key</mount>" >> /tmp/profile/partition.xml
    partition_name=\${partitions_name[\$key]}
    if [[ "\$key" == "\${default_partition}" ]]; then
        size="max"
    else
        size=""
    fi
    partition_percentage=\${partitions_percentage[\$key]}
    if [[ x"\${partition_percentage}" != x"" ]]; then
        if [[ x"\${size}" != x"" ]]; then
            size=\${partition_percentage}
        fi
    fi
    partition_size=\${partitions_size[\$key]}
    if [[ x"\${partition_size}" != x"" ]]; then
        if [[ x"\${size}" != x"" ]]; then
            size=\${partition_size}
        fi
    fi
    if [[ x"\${size}" != x"" ]]; then
        size=1M 
    fi
    echo "      <size>\$size</size>" >> /tmp/profile/partition.xml
    echo '    </partition>' >> /tmp/profile/partition.xml
done
echo '  </partitions>' >> /tmp/profile/partition.xml
echo '</drive>' >> /tmp/profile/partition.xml

echo '<device_map config:type="list">' >> /tmp/profile/bootloader.xml
echo '  <device_map_entry>' >> /tmp/profile/bootloader.xml
echo "    <firmware>\${first_disk_name}</firmware>" >> /tmp/profile/bootloader.xml
echo "    <linux>\${first_disk}</linux>" >> /tmp/profile/bootloader.xml
echo '  </device_map_entry>' >> /tmp/profile/bootloader.xml
echo '</device_map>' >> /tmp/profile/bootloader.xml
echo '<global>' >> /tmp/profile/bootloader.xml
echo '  <activate>true</activate>' >> /tmp/profile/bootloader.xml
echo '    <default>openSUSE</default>' >> /tmp/profile/bootloader.xml
echo '    <timeout config:type="integer">0</timeout>' >> /tmp/profile/bootloader.xml
echo '    <boot_mbr>true</boot_mbr>' >> /tmp/profile/bootloader.xml
echo '    <boot_boot>true</boot_boot>' >> /tmp/profile/bootloader.xml
echo '</global>' >> /tmp/profile/bootloader.xml
echo '<loader_type>grub</loader_type>' >> /tmp/profile/bootloader.xml
