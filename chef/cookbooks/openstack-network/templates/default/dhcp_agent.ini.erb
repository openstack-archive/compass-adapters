<%= node["openstack"]["network"]["custom_template_banner"] %>

[DEFAULT]
# Show debugging output in log (sets DEBUG log level output)
debug = <%= node["openstack"]["network"]["debug"] %>

# The DHCP agent will resync its state with Neutron to recover from any
# transient notification or rpc errors. The interval is number of
# seconds between attempts.
resync_interval = <%= node["openstack"]["network"]["dhcp"]["resync_interval"] %>

# The DHCP requires that an inteface driver be set.  Choose the one that best
# matches your plugin.

# OVS based plugins (OVS, Ryu, NEC, NVP, BigSwitch/Floodlight)
# interface_driver = neutron.agent.linux.interface.OVSInterfaceDriver
# LinuxBridge
#interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
interface_driver = <%= node["openstack"]["network"]["interface_driver"] %>

# OVS based plugins(Ryu, NEC, NVP, BigSwitch/Floodlight) that use OVS
# as OpenFlow switch and check port status
ovs_use_veth = <%= node["openstack"]["network"]["dhcp"]["ovs_use_veth"] %>

# The agent can use other DHCP drivers.  Dnsmasq is the simplest and requires
# no additional setup of the DHCP server.
dhcp_driver = <%= node["openstack"]["network"]["dhcp_driver"] %>

# Allow overlapping IP (Must have kernel build with CONFIG_NET_NS=y and
# iproute2 package that supports namespaces).
use_namespaces = <%= node["openstack"]["network"]["use_namespaces"] %>

<% if node['openstack']['network']['dhcp']['dhcp_delete_namespaces'] -%>
dhcp_delete_namespaces = <%= node['openstack']['network']['dhcp']['dhcp_delete_namespaces']  %>
<% end -%>

# The DHCP server can assist with providing metadata support on isolated
# networks. Setting this value to True will cause the DHCP server to append
# specific host routes to the DHCP request.  The metadata service will only
# be activated when the subnet gateway_ip is None.  The guest instance must
# be configured to request host routes via DHCP (Option 121).
enable_isolated_metadata = <%= node["openstack"]["network"]["dhcp"]["enable_isolated_metadata"] %>

# Allows for serving metadata requests coming from a dedicated metadata
# access network whose cidr is 169.254.169.254/16 (or larger prefix), and
# is connected to a Neutron router from which the VMs send metadata
# request. In this case DHCP Option 121 will not be injected in VMs, as
# they will be able to reach 169.254.169.254 through a router.
# This option requires enable_isolated_metadata = True
enable_metadata_network = <%= node["openstack"]["network"]["dhcp"]["enable_metadata_network"] %>

# Domain to use for building the host names of instances.
# If not set, it will default to "openstacklocal"
dhcp_domain = <%= node["openstack"]["network"]["dhcp"]["default_domain"] %>

# Pass a config file to dnsmasq so we can override settings
# like the mtu passed to the virtual machine
dnsmasq_config_file = /etc/neutron/dnsmasq.conf

# Limit number of leases to prevent a denial-of-service.
dnsmasq_lease_max = <%= node["openstack"]["network"]["dhcp"]["dnsmasq_lease_max"] %>
