<%= node["openstack"]["image"]["custom_template_banner"] %>

[DEFAULT]
# Show more verbose log output (sets INFO log level output)
verbose = <%= node["openstack"]["image"]["verbose"] %>

# Show debugging output in logs (sets DEBUG log level output)
debug = <%= node["openstack"]["image"]["debug"] %>

# =============== Image Cache Options =============================

# Directory that the Image Cache writes data to
image_cache_dir = <%= node["openstack"]["image"]["cache"]["dir"] %>

# Number of seconds after which we should consider an incomplete image to be
# stalled and eligible for reaping
image_cache_stall_time = <%= node["openstack"]["image"]["cache"]["stall_time"] %>

# image_cache_invalid_entry_grace_period - seconds
#
# If an exception is raised as we're writing to the cache, the cache-entry is
# deemed invalid and moved to <image_cache_datadir>/invalid so that it can be
# inspected for debugging purposes.
#
# This is number of seconds to leave these invalid images around before they
# are elibible to be reaped.
image_cache_invalid_entry_grace_period = <%= node["openstack"]["image"]["cache"]["grace_period"] %>

# Max cache size in bytes
image_cache_max_size = <%= node["openstack"]["image"]["api"]["cache"]["image_cache_max_size"] %>

# ================= Syslog Options ============================

<% if node["openstack"]["image"]["syslog"]["use"] %>
log_config = /etc/openstack/logging.conf
<% else %>
log_file = /var/log/glance/image-cache.log
<% end %>

# ============ Registry Options ===============================

# Address to find the registry server
registry_host = <%= @registry_ip_address %>

# Port the registry server is listening on
registry_port = <%= @registry_port %>

# Auth settings if using Keystone
# auth_url = http://127.0.0.1:5000/v2.0/
# admin_tenant_name = %SERVICE_TENANT_NAME%
# admin_user = %SERVICE_USER%
# admin_password = %SERVICE_PASSWORD%

# ============ Filesystem Store Options ========================

# Directory that the Filesystem backend store
# writes image data to
filesystem_store_datadir = <%= node["openstack"]["image"]["filesystem_store_datadir"] %>

# ============ Swift Store Options =============================


# Address where the Swift authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'https://'
swift_store_auth_address = <%= @swift_store_auth_address %>

# Authentication version to use.  Current Rackspace CloudFiles supports
# Version 1 while swift backed with keystone supports Version 2.
swift_store_auth_version = <%= @swift_store_auth_version %>

# User to authenticate against the Swift authentication service
# If you use Swift authentication service, set it to 'account':'user'
# where 'account' is a Swift storage account and 'user'
# is a user in that account
swift_store_user = <%= @swift_user_tenant %>:<%= @swift_store_user %>

# Auth key for the user authenticating against the
# Swift authentication service
swift_store_key = <%= @swift_store_key %>

# Container within the account that the account should use
# for storing images in Swift
swift_store_container = <%= node["openstack"]["image"]["api"]["swift"]["container"] %>

# Do we create the container if it does not exist?
swift_store_create_container_on_put = True

# What size, in MB, should Glance start chunking image files
# and do a large object manifest in Swift? By default, this is
# the maximum object size in Swift, which is 5GB
swift_store_large_object_size = <%= node["openstack"]["image"]["api"]["swift"]["large_object_size"] %>

# When doing a large object manifest, what size, in MB, should
# Glance write chunks to Swift? This amount of data is written
# to a temporary disk buffer during the process of chunking
# the image file, and the default is 200MB
swift_store_large_object_chunk_size = <%= node["openstack"]["image"]["api"]["swift"]["large_object_chunk_size"] %>

# Whether to use ServiceNET to communicate with the Swift storage servers.
# (If you aren't RACKSPACE, leave this False!)
#
# To use ServiceNET for authentication, prefix hostname of
# `swift_store_auth_address` with 'snet-'.
# Ex. https://example.com/v1.0/ -> https://snet-example.com/v1.0/
swift_enable_snet = <%= node["openstack"]["image"]["api"]["swift"]["enable_snet"] %>
<% unless node["openstack"]["image"]["api"]["swift"]["store_region"].nil? %>
swift_store_region = <%= node["openstack"]["image"]["api"]["swift"]["store_region"] %>
<% end %>

# ============ S3 Store Options =============================

# Address where the S3 authentication service lives
# Valid schemes are 'http://' and 'https://'
# If no scheme specified,  default to 'http://'
s3_store_host = 127.0.0.1:8080/v1.0/

# User to authenticate against the S3 authentication service
s3_store_access_key = <20-char AWS access key>

# Auth key for the user authenticating against the
# S3 authentication service
s3_store_secret_key = <40-char AWS secret key>

# Container within the account that the account should use
# for storing images in S3. Note that S3 has a flat namespace,
# so you need a unique bucket name for your glance images. An
# easy way to do this is append your AWS access key to "glance".
# S3 buckets in AWS *must* be lowercased, so remember to lowercase
# your AWS access key if you use it in your bucket name below!
s3_store_bucket = <lowercased 20-char aws access key>glance

# Do we create the bucket if it does not exist?
s3_store_create_bucket_on_put = False

# When sending images to S3, the data will first be written to a
# temporary buffer on disk. By default the platform's temporary directory
# will be used. If required, an alternative directory can be specified here.
# s3_store_object_buffer_dir = /path/to/dir

# ============ RBD Store Options =============================

# Ceph configuration file path
# If using cephx authentication, this file should
# include a reference to the right keyring
# in a client.<USER> section
rbd_store_ceph_conf = <%= node["openstack"]["image"]["api"]["rbd"]["rbd_store_ceph_conf"] %>

# RADOS user to authenticate as (only applicable if using cephx)
rbd_store_user = <%= node["openstack"]["image"]["api"]["rbd"]["rbd_store_user"] %>

# RADOS pool in which images are stored
rbd_store_pool = <%= node["openstack"]["image"]["api"]["rbd"]["rbd_store_pool"] %>

# Images will be chunked into objects of this size (in megabytes).
# For best performance, this should be a power of two
rbd_store_chunk_size = <%= node["openstack"]["image"]["api"]["rbd"]["rbd_store_chunk_size"] %>

# ============ VMware Datastore Store Options =====================

# ESX/ESXi or vCenter Server target system.
# The server value can be an IP address or a DNS name
# e.g. 127.0.0.1, 127.0.0.1:443, www.vmware-infra.com
vmware_server_host = <%= node['openstack']['image']['api']['vmware']['vmware_server_host'] %>

# Server username (string value)
vmware_server_username = <%= node['openstack']['image']['api']['vmware']['vmware_server_username'] %>

# Server password (string value)
vmware_server_password = <%= @vmware_server_password %>

# Inventory path to a datacenter (string value)
# Value optional when vmware_server_ip is an ESX/ESXi host: if specified
# should be `ha-datacenter`.
vmware_datacenter_path = <%= node['openstack']['image']['api']['vmware']['vmware_datacenter_path'] %>

# Datastore associated with the datacenter (string value)
vmware_datastore_name = <%= node['openstack']['image']['api']['vmware']['vmware_datastore_name'] %>

# The number of times we retry on failures
# e.g., socket error, etc (integer value)
vmware_api_retry_count = <%= node['openstack']['image']['api']['vmware']['vmware_api_retry_count'] %>

# The interval used for polling remote tasks
# invoked on VMware ESX/VC server in seconds (integer value)
vmware_task_poll_interval = <%= node['openstack']['image']['api']['vmware']['vmware_task_poll_interval'] %>

# Absolute path of the folder containing the images in the datastore
# (string value)
vmware_store_image_dir = <%= node['openstack']['image']['api']['vmware']['vmware_store_image_dir'] %>

# Allow to perform insecure SSL requests to the target system (boolean value)
vmware_api_insecure = <%= node['openstack']['image']['api']['vmware']['vmware_api_insecure'] %>

# ================= Security Options ==========================

# AES key for encrypting store 'location' metadata, including
# -- if used -- Swift or S3 credentials
# Should be set to a random string of length 16, 24 or 32 bytes
# metadata_encryption_key = <16, 24 or 32 char registry metadata key>
