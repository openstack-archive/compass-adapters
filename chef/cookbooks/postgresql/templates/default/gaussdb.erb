#!/bin/sh
# Copyright (c) 1995-2004 SUSE Linux AG, Nuernberg, Germany.
# All rights reserved.
#
# System startup script for PostgreSQL
#
# LSB compatible service control script; see http://www.linuxbase.org/spec/
#
### BEGIN INIT INFO
# Provides:       gaussdb
# Required-Start: $network $remote_fs
# Required-Stop: $network $remote_fs
# Default-Start:  3 5
# Default-Stop:   
# Description:    Start the gaussdb master daemon
### END INIT INFO

# Source SuSE config
PG_SYSCONFIG=/etc/sysconfig/postgresql
test -f $PG_SYSCONFIG && . $PG_SYSCONFIG

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

eval DATADIR=${POSTGRES_DATADIR:-~gaussdba/data}
OPTIONS=${POSTGRES_OPTIONS}
PIDFILE=$DATADIR/postmaster.pid

# The echo return value for success (defined in /etc/rc.config).
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

#

BINDIR=/opt/gaussdb/app/bin
VERSION=9.2
LOGFILE=$DATADIR/postmaster.log
gs_ctl () {
	CMD="$BINDIR/gs_ctl $@"
	su - gaussdba -c "$CMD"
}

case "$1" in
    start)
	if [ ! -f $DATADIR/PG_VERSION ]; then
	    echo -n "Initializing Gaussdb $VERSION at location ${DATADIR}"
	    LANG_SYSCONFIG=/etc/sysconfig/language
	    test -f "$LANG_SYSCONFIG" && . $LANG_SYSCONFIG
	    LANG=${POSTGRES_LANG:-$RC_LANG}
            PASSWORD=${POSTGRES_PASSWORD:-"gaussdba200@HW"}
	    INITDB=$BINDIR/gs_initdb
            V=$(printf "%02d%02d" $(echo $VERSION|awk -F. '{print $1, $2}'))
            AUTH="ident"; test $V -lt 0804 && AUTH="ident sameuser"
	    install -d -o gaussdba -g dbgrp -m 700 ${DATADIR} &&
            su - gaussdba -c \
                "$INITDB --locale=$LANG --auth=\"$AUTH\" $DATADIR --pwpasswd=$PASSWORD &> initlog" ||
	    rc_failed
	    rc_status -v
	    rc_status || {
		echo "You can find a log of the initialisation in ~gaussdba/initlog ."
		rc_exit
	   } 
	fi
	echo -n "Starting Gaussdb $VERSION "
        if gs_ctl status -D $DATADIR >/dev/null
        then
            rc_failed 0
	else
            set -o pipefail
            gs_ctl start -w -D $DATADIR -l $LOGFILE -o "\"$OPTIONS\""
	fi
	rc_status -v
    ;;

    stop)
	echo -n "Shutting down Gaussdb $VERSION "
	if gs_ctl status -D $DATADIR >/dev/null
        then
            gs_ctl stop -w -D $DATADIR -m fast &> /dev/null
	else
            rc_failed 0
	fi
	rc_status -v
    ;;

    try-restart|condrestart)
        ## Do a restart only if the service was active before.
        ## Note: try-restart is now part of LSB (as of 1.9).
        ## RH has a similar command named condrestart.
        if test "$1" = "condrestart"; then
                echo "${attn} Use try-restart ${done}(LSB)${attn} rather than condrestart ${warn}(RH)${norm}"
        fi
        $0 status
        if test $? = 0; then
            $0 restart
        else
            rc_reset        # Not running is not a failure.
        fi
        # Remember status and be quiet
        rc_status
    ;;

    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start
	rc_status
    ;;

    force-reload | reload)
	echo -n "Reloading configuration for PostgreSQL $VERSION "
	gs_ctl reload -D $DATADIR
        rc_status -v
    ;;

    status)
	echo -n "Checking for PostgreSQL $VERSION: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
	if ! gs_ctl status -D $DATADIR >/dev/null
	then
	    if test -f $DATADIR/postmaster.pid; then
		rc_failed 1
	    else
		rc_failed 3
	    fi
	fi
        rc_status -v
    ;;
    
    probe)
        rc_failed 3
        rc_status -v
    ;;

    *)
        echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
        exit 1
    ;;
esac

# Inform the caller not only verbosely and set an exit status.
rc_exit
