# Service definitions
#
# Autogenerated by Chef.

# monitoring service checks
define service {
    service_description Nagios
    hostgroup_name      <%= node['nagios']['server_role'] %>
    check_command       check-nagios
    contact_groups      admins
    use                 default-service
}

# Services defined by data bags
<% @services.each do |service| -%>
  <%# Do not define a service that has no hostgroup or a hostgroup that doesn't exist (including the "all" hostgroup), or a service that is not applicable in this environment %>
  <% unless service['hostgroup_name'].nil? || service['hostgroup_name'] == "all" || (service['activate_check_in_environment'] && service['activate_check_in_environment'] != node.chef_environment )
       valid = false

       service['hostgroup_name'].split(",").each do |s|
         valid = @hostgroups.include?(s) || @search_hostgroups.include?(s)
         valid || break
       end

       if valid %>
define service {
  service_description <%= service['description'] || service['id'] %>
  hostgroup_name <%= service['hostgroup_name'].split(",").sort.join(",") %>
  <% if service['use_existing_command'] -%>
  check_command <%= service['use_existing_command'] %>
  <% else -%>
  check_command check_<%= service['id'] %>
  <% end -%>
  use <% if service['service_template'].nil? -%>default-service<% else -%><%= service['service_template'] %> <% end -%>
  <% unless service['event_handler'].nil? -%>event_handler <%= service['event_handler'] %><% end -%>
  <% %w{check_interval retry_interval notification_interval}.each do |conf| %>
    <% unless service[conf].nil? %>
  <%= conf %> <%= nagios_interval(service[conf]) %>
    <% end %>
  <% end %>
  <% %w{passive_checks_enabled parallelize_check obsess_over_service check_freshness notifications_enabled event_handler_enabled flap_detection_enabled failure_prediction_enabled process_perf_data retain_status_information retain_nonstatus_information is_volatile check_period max_check_attempts contacts contact_groups notification_options notification_period notes_url action_url servicegroups}.each do |conf| %>
    <% unless service[conf].nil? %>
  <%= conf %> <%= service[conf] %>
    <% end %>
   <% end %>
}
  <% end %>
<% if service['use_escalation'] %>define serviceescalation {
  # this should be an escalation defined in the nagios_serviceescalation data bag
  use <%= service['use_escalation'] %>
  service_description <%= service['description'] || service['id'] %>
  hostgroup_name <%= service['hostgroup_name'] %>
}
<% end %>
  <% end -%>
<% end -%>
